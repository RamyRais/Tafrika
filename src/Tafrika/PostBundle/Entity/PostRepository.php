<?php

namespace Tafrika\PostBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function findFresh($postPerPage, $page, $nsfw){
        if($page<1){
            throw new \InvalidArgumentException("L'argument page ne peut pas être inférieur à 1");
        }

        $query = $this->createQueryBuilder('p');
        if($nsfw==1) {
            $query->where('p.NSFW = :nsfw')
                ->setParameter('nsfw', 0);
        }
        $query->orderBy('p.createdAt','DESC');
        $query->setFirstResult( ($page - 1)* $postPerPage);
        $query->setMaxResults($postPerPage);
        return $query->getQuery()->getResult();
    }

    public function findFollowedUserPosts($user, $postPerPage, $page, $nsfw){
        if($page<1){
            throw new \InvalidArgumentException("L'argument page ne peut pas être inférieur à 1");
        }
        $query = $this->createQueryBuilder('p');
        $query->where($query->expr()->in('p.user',':followed'))
              ->setParameter('followed',$user->getFollowed()->toArray());
        if($nsfw==1) {
            $query->andWhere('p.NSFW = :nsfw')
                ->setParameter('nsfw', 0);
        }
        $query->orderBy('p.createdAt','DESC');
        $query->setFirstResult( ($page - 1)* $postPerPage);
        $query->setMaxResults($postPerPage);
        return $query->getQuery()->getResult();
    }

    public function findUsersPosts($user, $postPerPage, $page, $nsfw){
        if($page<1){
            throw new \InvalidArgumentException("L'argument page ne peut pas être inférieur à 1");
        }
        $query = $this->createQueryBuilder('p');
        $query->where('p.user = :user')
            ->setParameter('user',$user);
        if($nsfw==1) {
            $query->andWhere('p.NSFW = :nsfw')
                ->setParameter('nsfw', 0);
        }
        $query->orderBy('p.createdAt','DESC');
        $query->setFirstResult( ($page - 1)* $postPerPage);
        $query->setMaxResults($postPerPage);
        return $query->getQuery()->getResult();
    }

    public function countUserPosts($user, $nsfw){
        $query = $this->createQueryBuilder('p');
        $query = $this->countPosts($query, $nsfw);
        $query->andWhere('p.user = :user')
            ->setParameter('user',$user);
        return $query->getQuery()->getSingleScalarResult();
    }

    public function countFollowedUserPosts($user, $nsfw){
        $query = $this->createQueryBuilder('p');
        $query = $this->countPosts($query, $nsfw);
        $query->andWhere($query->expr()->in('p.user',':followed'))
            ->setParameter('followed',$user->getFollowed()->toArray());

        return $query->getQuery()->getSingleScalarResult();
    }

    public function countFreshPosts($nsfw){
        $query = $this->createQueryBuilder('p');
        $query = $this->countPosts($query, $nsfw);
        return $query->getQuery()->getSingleScalarResult();
    }

    public function countPosts($query, $nsfw){
        $query->select('COUNT(p)');
        if($nsfw==1) {
            $query->where('p.NSFW = :nsfw')
                ->setParameter('nsfw', 0);
        }
        return $query;
    }
}
